import time
import os
import logging
from typing import Tuple, Dict, Union, Any

# Уровень логирования для модуля screen_monitor
SCREEN_MONITOR_LOG_LEVEL: int = logging.WARNING
"""Уровень логирования для модуля screen_monitor (по умолчанию: WARNING).
Возможные значения:
- logging.DEBUG - подробная отладочная информация
- logging.INFO - информационные сообщения о работе
- logging.WARNING - только предупреждения и ошибки (по умолчанию)
- logging.ERROR - только ошибки
- logging.CRITICAL - только критические ошибки
Для включения информационных логов установите logging.INFO."""

# Сохранение скриншотов экрана с выделенными элементами

# Специальная функция отчетов в Менеджере
OUT_REPORT = 1
"""Нужно ли выводить команду, которая выполняется."""

# Специальная функция отчетов в Менеджере
SAVE_SCREENSHOT = 1
"""Нужно ли сохранять скриншоты экранов."""

# Путь к папке для хранения скриншотов экрана
SCREENSHOTS_DIR: str = "screenshots"
"""Путь к папке для хранения скриншотов экрана (по умолчанию: 'screenshots')."""

# Путь к папке для хранения образцов изображений
SAMPLES_DIR: str = "sample"
"""Путь к папке для хранения образцов изображений (по умолчанию: 'sample')."""

# Имя файла для временного хранения команд по умолчанию
DEFAULT_COMMANDS_FILE: str = "temp_commands.json"
"""Имя файла для временного хранения команд по умолчанию (по умолчанию: 'temp_commands.json').
Используется при записи и воспроизведении команд без указания имени файла."""

# Координаты верхнего левого угла области для анализа экрана
TOP_LEFT_CORNER: Tuple[int, int] = (0, 0)
"""Координаты верхнего левого угла области для анализа экрана (по умолчанию: (0, 0))."""

# Размер области изображения (ширина, высота) для анализа экрана
SCREEN_AREA_SIZE: Tuple[int, int] = (64, 64)
"""Размер области изображения (ширина, высота) для эмбеддинга и сравнения экранов (по умолчанию: 64x64 пикселей).
Используется для выделения участка верхнего левого угла экрана при создании векторов и сохранении скриншотов."""

# Порог схожести для определения близости экранов по векторам
SCREEN_SIMILARITY_THRESHOLD: float = 0.8
"""Порог схожести для определения близости экранов по векторам (по умолчанию: 0.95)."""

# # Порог схожести для определения близости образцов по векторам
# SAMPLE_SIMILARITY_THRESHOLD: float = 0.9
# """Порог схожести для определения близости образцов по векторам (по умолчанию: 0.90)."""

# Порог совпадения для поиска образцов на скриншоте с использованием OpenCV
OPENCV_MATCH_THRESHOLD: float = 0.5
"""Порог совпадения для поиска образцов на скриншоте с использованием OpenCV (по умолчанию: 0.85)."""

# Номер монитора для захвата (0 - основной монитор, 1, 2, ... - дополнительные)
SCREEN_MONITOR_NUMBER: int = 1
"""Номер монитора для захвата (по умолчанию: 1). 
0 обычно используется для "виртуального" монитора, включающего все экраны. 
1 - первый физический монитор, 2 - второй и т.д."""

# Имя области разделяемой памяти для скриншотов
SCREEN_SHARED_MEMORY_NAME: str = "screen_capture"
"""Имя области разделяемой памяти для хранения скриншотов (по умолчанию: 'screen_capture').
Используется для обмена данными между процессами при захвате экрана."""

# Разрешение захватываемого изображения (ширина, высота) 
SCREEN_RESOLUTION: Tuple[int, int] = (1920, 1080)
"""Разрешение захватываемого изображения экрана в пикселях (по умолчанию: 1920x1080).
Используется для создания буфера разделяемой памяти."""

# Порт для работы сервера ChromaDB
CHROMA_PORT: int = 8000
"""Порт для работы сервера ChromaDB (по умолчанию: 8000)."""

# Директория для хранения данных ChromaDB
CHROMA_PERSIST_DIRECTORY: str = "chroma_db"
"""Директория для хранения данных ChromaDB (по умолчанию: 'chroma_db')."""

# Название коллекции для экранов в ChromaDB
CHROMA_SCREEN_COLLECTION: str = "screens"
"""Название коллекции для экранов в ChromaDB (по умолчанию: 'screens')."""

# Название коллекции для образцов в ChromaDB
CHROMA_SAMPLE_COLLECTION: str = "samples"
"""Название коллекции для образцов в ChromaDB (по умолчанию: 'samples')."""

# Параметры для модуля player
# Задержка между нажатием и отпусканием клавиши в секундах
PLAYER_KEY_PRESS_DELAY: float = 0.05
"""Задержка между нажатием и отпусканием клавиши в секундах (по умолчанию: 0.05 сек).
Влияет на скорость ввода с клавиатуры. Увеличение значения делает нажатия более различимыми."""

# Задержка перед кликом мыши после перемещения курсора в секундах
PLAYER_MOUSE_MOVE_DELAY: float = 0.1
"""Задержка перед кликом мыши после перемещения курсора в секундах (по умолчанию: 0.1 сек).
Обеспечивает стабильность при выполнении действий мыши. Увеличение значения делает 
перемещения курсора более плавными, но замедляет выполнение команд."""

# Длительность плавного перемещения курсора в секундах
PLAYER_MOUSE_MOVE_DURATION: float = 2.0
"""Длительность плавного перемещения курсора к цели в секундах (по умолчанию: 2.0 сек).
Определяет, как долго курсор будет визуально перемещаться от текущей позиции к целевой.
Значение 0 отключает плавное перемещение."""

# Задержка между последовательными командами в секундах
PLAYER_COMMAND_DELAY: float = 0.2
"""Задержка между последовательными командами в секундах (по умолчанию: 0.2 сек).
Определяет скорость выполнения списка команд. Увеличение значения замедляет выполнение 
всего списка, но улучшает стабильность работы."""

# Время ожидания перед началом тестирования в секундах
PLAYER_TEST_WAIT_TIME: int = 3
"""Время ожидания перед началом тестирования в секундах (по умолчанию: 3 сек).
Используется в автономном режиме, чтобы дать пользователю время для 
подготовки к тестированию (например, переключиться на нужное окно)."""

# Время ожидания экрана в секундах
PLAYER_SCREEN_WAIT_TIME: int = 3
"""Время ожидания в секундах (по умолчанию: 3 сек).
Ждет перед выполнением команды нужный экран."""

# Время ожидания элемента на экране' в секундах
PLAYER_ELEMENT_WAIT_TIME: int = 5
"""Время ожидания в секундах (по умолчанию: 5 сек).
Ждет перед выполнением команды пока на экране появится требуемый элемент."""

# Параметры воспроизведения действий
PLAYER_TIMEOUT: float = 5.0
"""Таймаут ожидания выполнения команды в секундах (по умолчанию: 5.0 сек).
Определяет, как долго система будет ждать выполнения команды перед продолжением."""

# Множество для хранения использованных идентификаторов
_used_ids: set = set()

def generate_unique_id() -> str:
    """Генерирует уникальный идентификатор в виде строки на основе текущего времени в секундах.

    Использует `int(time.time())` для получения текущей временной метки в секундах. Если идентификатор
    уже использован, увеличивает значение на 1 до получения уникального.

    Returns:
        str: Уникальный идентификатор в виде строки.
    """
    candidate_id: int = int(time.time())
    while candidate_id in _used_ids:
        candidate_id += 1
    _used_ids.add(candidate_id)
    return str(candidate_id)

# Создание директорий для хранения данных, если они не существуют
for directory in [SCREENSHOTS_DIR, SAMPLES_DIR, CHROMA_PERSIST_DIRECTORY]:
    if not os.path.exists(directory):
        os.makedirs(directory)